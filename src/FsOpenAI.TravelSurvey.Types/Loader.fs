
// This file was generated by the createTypes.fsx script. Do not edit this file directly.
module FsOpenAI.TravelSurvey.Loader
open System
open FsOpenAI.TravelSurvey.Types

let toCDIVMSAR (v:string) : CDIVMSAR =
    match int v with
    | 11 -> ``CDIVMSAR_New England MSA|CMSA of 1 million  with heavy rail``
    | 12 -> ``CDIVMSAR_New England MSA|CMSA of 1 million  w|o heavy rail``
    | 13 -> ``CDIVMSAR_New England MSA of less than 1 million``
    | 14 -> ``CDIVMSAR_New England Not in an MSA``
    | 21 -> ``CDIVMSAR_Mid-Atlantic MSA|CMSA of 1 million  with heavy rail``
    | 22 -> ``CDIVMSAR_Mid-Atlantic MSA|CMSA of 1 million  w|o heavy rail``
    | 23 -> ``CDIVMSAR_Mid-Atlantic MSA of less than 1 million``
    | 24 -> ``CDIVMSAR_Mid-Atlantic Not in an MSA``
    | 31 -> ``CDIVMSAR_East North Central MSA|CMSA of 1 million  with heavy rail``
    | 32 -> ``CDIVMSAR_East North Central MSA|CMSA of 1 million  w|o heavy rail``
    | 33 -> ``CDIVMSAR_East North Central MSA of less than 1 million``
    | 34 -> ``CDIVMSAR_East North Central Not in an MSA``
    | 42 -> ``CDIVMSAR_West North Central MSA|CMSA of 1 million  w|o heavy rail``
    | 43 -> ``CDIVMSAR_West North Central MSA of less than 1 million``
    | 44 -> ``CDIVMSAR_West North Central Not in an MSA``
    | 51 -> ``CDIVMSAR_South Atlantic MSA|CMSA of 1 million  with heavy rail``
    | 52 -> ``CDIVMSAR_South Atlantic MSA|CMSA of 1 million  w|o heavy rail``
    | 53 -> ``CDIVMSAR_South Atlantic MSA of less than 1 million``
    | 54 -> ``CDIVMSAR_South Atlantic Not in an MSA``
    | 62 -> ``CDIVMSAR_East South Central MSA|CMSA of 1 million  w|o heavy rail``
    | 63 -> ``CDIVMSAR_East South Central MSA of less than 1 million``
    | 64 -> ``CDIVMSAR_East South Central Not in an MSA``
    | 72 -> ``CDIVMSAR_West South Central MSA|CMSA of 1 million  w|o heavy rail``
    | 73 -> ``CDIVMSAR_West South Central MSA of less than 1 million``
    | 74 -> ``CDIVMSAR_West South Central Not in an MSA``
    | 82 -> ``CDIVMSAR_Mountain MSA|CMSA of 1 million  w|o heavy rail``
    | 83 -> ``CDIVMSAR_Mountain MSA of less than 1 million``
    | 84 -> ``CDIVMSAR_Mountain Not in an MSA``
    | 91 -> ``CDIVMSAR_Pacific MSA|CMSA of 1 million  with heavy rail``
    | 92 -> ``CDIVMSAR_Pacific MSA|CMSA of 1 million  w|o heavy rail``
    | 93 -> ``CDIVMSAR_Pacific MSA of less than 1 million``
    | 94 -> ``CDIVMSAR_Pacific Not in an MSA``

let toCENSUS_D (v:string) : CENSUS_D =
    match int v with
    | 1 -> ``CENSUS_D_New England``
    | 2 -> ``CENSUS_D_Middle Atlantic``
    | 3 -> ``CENSUS_D_East North Central``
    | 4 -> ``CENSUS_D_West North Central``
    | 5 -> ``CENSUS_D_South Atlantic``
    | 6 -> ``CENSUS_D_East South Central``
    | 7 -> ``CENSUS_D_West South Central``
    | 8 -> CENSUS_D_Mountain
    | 9 -> CENSUS_D_Pacific

let toCENSUS_R (v:string) : CENSUS_R =
    match int v with
    | 1 -> CENSUS_R_Northeast
    | 2 -> CENSUS_R_Midwest
    | 3 -> CENSUS_R_South
    | 4 -> CENSUS_R_West

let toFLAG100 (v:string) : FLAG100 =
    match int v with
    | 1 -> ``FLAG100_All eligible household members completed``
    | 2 -> ``FLAG100_75% to 99% of eligible household members completed``

let toHHFAMINC (v:string) : HHFAMINC =
    match int v with
    | -7 -> ``HHFAMINC_I prefer not to answer``
    | -8 -> ``HHFAMINC_I don't know``
    | 1 -> ``HHFAMINC_Less than 10,000``
    | 2 -> ``HHFAMINC_10,000 to 14,999``
    | 3 -> ``HHFAMINC_15,000 to 24,999``
    | 4 -> ``HHFAMINC_25,000 to 34,999``
    | 5 -> ``HHFAMINC_35,000 to 49,999``
    | 6 -> ``HHFAMINC_50,000 to 74,999``
    | 7 -> ``HHFAMINC_75,000 to 99,999``
    | 8 -> ``HHFAMINC_100,000 to 124,999``
    | 9 -> ``HHFAMINC_125,000 to 149,999``
    | 10 -> ``HHFAMINC_150,000 to 199,999``
    | 11 -> ``HHFAMINC_200,000 or more``

let toHHFAMINC_IMP (v:string) : HHFAMINC_IMP =
    match int v with
    | 1 -> ``HHFAMINC_IMP_Less than 10,000``
    | 2 -> ``HHFAMINC_IMP_10,000 to 14,999``
    | 3 -> ``HHFAMINC_IMP_15,000 to 24,999``
    | 4 -> ``HHFAMINC_IMP_25,000 to 34,999``
    | 5 -> ``HHFAMINC_IMP_35,000 to 49,999``
    | 6 -> ``HHFAMINC_IMP_50,000 to 74,999``
    | 7 -> ``HHFAMINC_IMP_75,000 to 99,999``
    | 8 -> ``HHFAMINC_IMP_100,000 to 124,999``
    | 9 -> ``HHFAMINC_IMP_125,000 to 149,999``
    | 10 -> ``HHFAMINC_IMP_150,000 to 199,999``
    | 11 -> ``HHFAMINC_IMP_200,000 or more``

let toHHRELATD (v:string) : HHRELATD =
    match int v with
    | 1 -> ``HHRELATD_At least two persons in hh are related``
    | 2 -> ``HHRELATD_No related persons in hh``

let toHH_HISP (v:string) : HH_HISP =
    match int v with
    | 1 -> ``HH_HISP_Hispanic or Latino``
    | 2 -> ``HH_HISP_Not Hispanic or Latino``

let toHH_RACE (v:string) : HH_RACE =
    match int v with
    | 1 -> HH_RACE_White
    | 2 -> ``HH_RACE_Black or African American``
    | 3 -> HH_RACE_Asian
    | 4 -> ``HH_RACE_American Indian|Alaska Native``
    | 5 -> ``HH_RACE_Native Hawaiian|Pacific Islander``
    | 6 -> ``HH_RACE_Multiple races selected``
    | 97 -> ``HH_RACE_Other race``

let toHOMEOWN (v:string) : HOMEOWN =
    match int v with
    | 1 -> ``HOMEOWN_Owned by hh member with mortgage or loan``
    | 2 -> ``HOMEOWN_Owned by hh member free and clear (no mortgage)``
    | 3 -> ``HOMEOWN_Rented by hh member``
    | 4 -> ``HOMEOWN_Occupied without payment``

let toHOMETYPE (v:string) : HOMETYPE =
    match int v with
    | 1 -> ``HOMETYPE_One-family detached``
    | 2 -> ``HOMETYPE_One-family attached (townhome, condo)``
    | 3 -> ``HOMETYPE_Building with 2 or more apartments``
    | 4 -> ``HOMETYPE_Mobile home``
    | 5 -> ``HOMETYPE_Boat, RV, van, etc``

let toLIF_CYC (v:string) : LIF_CYC =
    match int v with
    | 1 -> ``LIF_CYC_one adult, no children``
    | 2 -> ``LIF_CYC_2  adults, no children``
    | 3 -> ``LIF_CYC_one adult, youngest child 0-5``
    | 4 -> ``LIF_CYC_2  adults, youngest child 0-5``
    | 5 -> ``LIF_CYC_one adult, youngest child 6-15``
    | 6 -> ``LIF_CYC_2  adults, youngest child 6-15``
    | 7 -> ``LIF_CYC_one adult, youngest child 16-21``
    | 8 -> ``LIF_CYC_2  adults, youngest child 16-21``
    | 9 -> ``LIF_CYC_one adult, retired, no children``
    | 10 -> ``LIF_CYC_2  adults, retired, no children``

let toMSACAT (v:string) : MSACAT =
    match int v with
    | 1 -> ``MSACAT_MSA of 1 million or more, with rail``
    | 2 -> ``MSACAT_MSA of 1 million or more, without rail``
    | 3 -> ``MSACAT_MSA less than 1 million``
    | 4 -> ``MSACAT_Not in MSA``

let toMSASIZE (v:string) : MSASIZE =
    match int v with
    | 1 -> ``MSASIZE_In an MSA of Less than 250,000``
    | 2 -> ``MSASIZE_In an MSA of 250,000 - 499,999``
    | 3 -> ``MSASIZE_In an MSA of 500,000 - 999,999``
    | 4 -> ``MSASIZE_In an MSA or CMSA of 1,000,000 - 2,999,999``
    | 5 -> ``MSASIZE_In an MSA or CMSA of 3 million or more``
    | 6 -> ``MSASIZE_Not in MSA or CMSA``

let toTRAVDAY (v:string) : TRAVDAY =
    match int v with
    | 1 -> TRAVDAY_Sunday
    | 2 -> TRAVDAY_Monday
    | 3 -> TRAVDAY_Tuesday
    | 4 -> TRAVDAY_Wednesday
    | 5 -> TRAVDAY_Thursday
    | 6 -> TRAVDAY_Friday
    | 7 -> TRAVDAY_Saturday

let toURBAN (v:string) : URBAN =
    match int v with
    | 1 -> ``URBAN_In an urban area``
    | 2 -> ``URBAN_In an Urban cluster``
    | 3 -> ``URBAN_In an area surrounded by urban areas``
    | 4 -> ``URBAN_Not in urban area``

let toURBANSIZE (v:string) : URBANSIZE =
    match int v with
    | 1 -> ``URBANSIZE_50,000-199,999``
    | 2 -> ``URBANSIZE_200,000-499,999``
    | 3 -> ``URBANSIZE_500,000-999,999``
    | 4 -> ``URBANSIZE_1,000,000 or more with heavy rail``
    | 5 -> ``URBANSIZE_1,000,000 or more without heavy rail``
    | 6 -> ``URBANSIZE_Not in urbanized area``

let toURBRUR (v:string) : URBRUR =
    match int v with
    | 1 -> URBRUR_Urban
    | 2 -> URBRUR_Rural

let toMAKE (v:string) : MAKE =
    match int v with
    | 0 -> ``MAKE_Suppressed for confidential reason``
    | 2 -> MAKE_Jeep
    | 6 -> MAKE_Chrysler
    | 7 -> MAKE_Dodge
    | 12 -> MAKE_Ford
    | 13 -> MAKE_Lincoln
    | 18 -> ``MAKE_Buick | Opel``
    | 19 -> MAKE_Cadillac
    | 20 -> MAKE_Chevrolet
    | 22 -> MAKE_Pontiac
    | 23 -> MAKE_GMC
    | 29 -> ``MAKE_Other Domestic Manufacturers (eg, Tesla)``
    | 30 -> MAKE_Volkswagen
    | 32 -> MAKE_Audi
    | 34 -> MAKE_BMW
    | 35 -> ``MAKE_Nissan|Datsun``
    | 37 -> MAKE_Honda
    | 41 -> MAKE_Mazda
    | 42 -> ``MAKE_Mercedes-Benz``
    | 48 -> MAKE_Subaru
    | 49 -> MAKE_Toyota
    | 51 -> MAKE_Volvo
    | 52 -> MAKE_Mitsubishi
    | 54 -> MAKE_Acura
    | 55 -> MAKE_Hyundai
    | 58 -> MAKE_Infiniti
    | 59 -> MAKE_Lexus
    | 63 -> MAKE_KIA
    | 72 -> ``MAKE_Harley-Davidson``
    | 98 -> ``MAKE_Other Make``

let toVEHFUEL (v:string) : VEHFUEL =
    match int v with
    | -9 -> ``VEHFUEL_Not ascertained``
    | 1 -> VEHFUEL_Gas
    | 2 -> VEHFUEL_Diesel
    | 3 -> VEHFUEL_Biodiesel
    | 4 -> ``VEHFUEL_Plug-in hybrid``
    | 5 -> ``VEHFUEL_Electric only``
    | 6 -> ``VEHFUEL_Hybrid, gas|electric, non plug-in``
    | 97 -> ``VEHFUEL_Uses other fuel``

let toWHOMAIN (v:string) : WHOMAIN =
    match int v with
    | -9 -> ``WHOMAIN_Not ascertained``
    | 1 -> WHOMAIN_Person1
    | 2 -> ``WHOMAIN_Person 2``
    | 3 -> ``WHOMAIN_Person 3``
    | 4 -> ``WHOMAIN_Person 4``
    | 5 -> ``WHOMAIN_Person 5``
    | 6 -> ``WHOMAIN_Person 6``
    | 7 -> ``WHOMAIN_Person 7``
    | 8 -> ``WHOMAIN_Person 8``
    | 96 -> ``WHOMAIN_No one``
    | 97 -> ``WHOMAIN_Someone else``

let toCONDNIGH (v:string) : CONDNIGH =
    match int v with
    | -1 -> ``CONDNIGH_Valid skip``
    | -9 -> ``CONDNIGH_Not ascertained``
    | 1 -> CONDNIGH_Selected
    | 2 -> ``CONDNIGH_Not Selected``

let toCOV1_OHD (v:string) : COV1_OHD =
    match int v with
    | -8 -> ``COV1_OHD_Don't Know``
    | -9 -> ``COV1_OHD_Not ascertained``
    | 1 -> ``COV1_OHD_Do more often than before``
    | 2 -> ``COV1_OHD_Do the same as before``
    | 3 -> ``COV1_OHD_Do less often than before``
    | 4 -> ``COV1_OHD_Not Applicable``

let toCOV1_SCH (v:string) : COV1_SCH =
    match int v with
    | -1 -> ``COV1_SCH_Valid skip``
    | -8 -> ``COV1_SCH_Don't Know``
    | -9 -> ``COV1_SCH_Not ascertained``
    | 1 -> ``COV1_SCH_Do more often than before``
    | 2 -> ``COV1_SCH_Do the same as before``
    | 3 -> ``COV1_SCH_Do less often than before``
    | 4 -> ``COV1_SCH_Not Applicable``

let toCOV2_OHD (v:string) : COV2_OHD =
    match int v with
    | -1 -> ``COV2_OHD_Valid skip``
    | -8 -> ``COV2_OHD_Don't Know``
    | -9 -> ``COV2_OHD_Not ascertained``
    | 1 -> COV2_OHD_Temporary
    | 2 -> COV2_OHD_Permanent

let toCOV2_SCH (v:string) : COV2_SCH =
    match int v with
    | -1 -> ``COV2_SCH_Valid skip``
    | -8 -> ``COV2_SCH_Don't Know``
    | 1 -> COV2_SCH_Temporary
    | 2 -> COV2_SCH_Permanent

let toDRIVINGVEHICLE (v:string) : DRIVINGVEHICLE =
    match int v with
    | -1 -> ``DRIVINGVEHICLE_Valid skip``
    | 1 -> ``DRIVINGVEHICLE_Yes, use a household vehicle``
    | 2 -> ``DRIVINGVEHICLE_No, use non-household vehicle``
    | 3 -> ``DRIVINGVEHICLE_Use both household and non-household vehicle``

let toEDUC (v:string) : EDUC =
    match int v with
    | -1 -> ``EDUC_Valid skip``
    | 1 -> ``EDUC_Less than high school``
    | 2 -> ``EDUC_Some high school, no diploma|GED``
    | 3 -> ``EDUC_High school graduate, have diploma|GED``
    | 4 -> ``EDUC_Some college, no degree| some trade school``
    | 5 -> ``EDUC_Associates degree (2-year)| trade school certificate``
    | 6 -> ``EDUC_Bachelor's degree``
    | 7 -> ``EDUC_Master's degree``
    | 8 -> ``EDUC_Professional|Doctorate degree``

let toLAST30_BKSHR (v:string) : LAST30_BKSHR =
    match int v with
    | -1 -> ``LAST30_BKSHR_Valid skip``
    | -8 -> ``LAST30_BKSHR_Don't Know``
    | -9 -> ``LAST30_BKSHR_Not ascertained``
    | 1 -> LAST30_BKSHR_Yes
    | 2 -> LAST30_BKSHR_No

let toMEDCOND (v:string) : MEDCOND =
    match int v with
    | -7 -> ``MEDCOND_I prefer not to answer``
    | -8 -> ``MEDCOND_Don't know``
    | -9 -> ``MEDCOND_Not ascertained``
    | 1 -> MEDCOND_Yes
    | 2 -> MEDCOND_No

let toMEDCOND6 (v:string) : MEDCOND6 =
    match int v with
    | -1 -> ``MEDCOND6_Valid skip``
    | -7 -> ``MEDCOND6_I prefer not to answer``
    | -8 -> ``MEDCOND6_Don't know``
    | -9 -> ``MEDCOND6_Not ascertained``
    | 1 -> ``MEDCOND6_6 months or less``
    | 2 -> ``MEDCOND6_More than 6 months``
    | 3 -> ``MEDCOND6_Entire life``

let toPARKHOMEAMT (v:string) : PARKHOMEAMT =
    match int v with
    | -1 -> ``PARKHOMEAMT_Valid skip``
    | 1 -> ``PARKHOMEAMT_Paid to park at home``
    | 9998 -> ``PARKHOMEAMT_Paid but I don't remember the cost``

let toPARKHOMEAMT_PAYTYPE (v:string) : PARKHOMEAMT_PAYTYPE =
    match int v with
    | -1 -> ``PARKHOMEAMT_PAYTYPE_Valid skip``
    | 1 -> ``PARKHOMEAMT_PAYTYPE_One Time``
    | 3 -> ``PARKHOMEAMT_PAYTYPE_Per Month``

let toPRMACT (v:string) : PRMACT =
    match int v with
    | -1 -> ``PRMACT_Valid skip``
    | 1 -> ``PRMACT_Temporarily absent from a job or business``
    | 2 -> ``PRMACT_Looking for work|unemployed``
    | 3 -> ``PRMACT_A homemaker``
    | 4 -> ``PRMACT_Going to school``
    | 5 -> PRMACT_Retired
    | 97 -> ``PRMACT_Something else``

let toPROXY (v:string) : PROXY =
    match int v with
    | 1 -> PROXY_Self
    | 2 -> ``PROXY_Someone else``

let toQACSLAN3 (v:string) : QACSLAN3 =
    match int v with
    | -1 -> ``QACSLAN3_Valid skip``
    | -9 -> ``QACSLAN3_Not ascertained``
    | 1 -> ``QACSLAN3_Very well``
    | 2 -> QACSLAN3_Well
    | 3 -> ``QACSLAN3_Not well``
    | 4 -> ``QACSLAN3_Not at all``

let toR_HISP (v:string) : R_HISP =
    match int v with
    | 1 -> R_HISP_Hispanic
    | 2 -> ``R_HISP_Not Hispanic``

let toR_RACE (v:string) : R_RACE =
    match int v with
    | -9 -> ``R_RACE_Not ascertained``
    | 1 -> R_RACE_White
    | 2 -> ``R_RACE_Black or African American``
    | 3 -> R_RACE_Asian
    | 4 -> ``R_RACE_American Indian|Alaska Native``
    | 5 -> ``R_RACE_Native Hawaiian|Pacific Islander``
    | 6 -> ``R_RACE_Multiple races selected``
    | 97 -> ``R_RACE_Other race``

let toR_RELAT (v:string) : R_RELAT =
    match int v with
    | -9 -> ``R_RELAT_Not ascertained``
    | 1 -> ``R_RELAT_Spouse|Partner``
    | 2 -> R_RELAT_Child
    | 3 -> R_RELAT_Parent
    | 4 -> ``R_RELAT_Brother|Sister``
    | 5 -> ``R_RELAT_Other relative``
    | 6 -> ``R_RELAT_Not related``
    | 7 -> R_RELAT_Self

let toR_SEX (v:string) : R_SEX =
    match int v with
    | -7 -> R_SEX_Refuse
    | -8 -> ``R_SEX_Don't know``
    | -9 -> ``R_SEX_Not ascertained``
    | 1 -> R_SEX_Male
    | 2 -> R_SEX_Female

let toR_SEX_IMP (v:string) : R_SEX_IMP =
    match int v with
    | 1 -> R_SEX_IMP_Male
    | 2 -> R_SEX_IMP_Female

let toSAMEPLC (v:string) : SAMEPLC =
    match int v with
    | -1 -> ``SAMEPLC_Valid skip``
    | -7 -> ``SAMEPLC_I prefer not to answer``
    | -8 -> ``SAMEPLC_Don't know``
    | -9 -> ``SAMEPLC_Not ascertained``
    | 1 -> ``SAMEPLC_Personally sick or quarantining``
    | 2 -> ``SAMEPLC_Vacation or personal day``
    | 3 -> SAMEPLC_Caretaking
    | 4 -> ``SAMEPLC_Disabled or home-bound``
    | 5 -> ``SAMEPLC_Worked at home (for pay)``
    | 6 -> ``SAMEPLC_Not scheduled to work``
    | 7 -> ``SAMEPLC_Household chores|projects``
    | 8 -> ``SAMEPLC_Bad weather``
    | 9 -> ``SAMEPLC_Out of country``
    | 10 -> ``SAMEPLC_No transportation available``
    | 12 -> ``SAMEPLC_School holiday|teacher workday``
    | 14 -> ``SAMEPLC_Hospitalized or otherwise confined``
    | 15 -> ``SAMEPLC_School from home``
    | 16 -> ``SAMEPLC_Reluctant to travel``
    | 97 -> ``SAMEPLC_Something else, please specify``

let toSCHOOL1C (v:string) : SCHOOL1C =
    match int v with
    | -1 -> ``SCHOOL1C_Valid skip``
    | -9 -> ``SCHOOL1C_Not ascertained``
    | 1 -> ``SCHOOL1C_In- person``
    | 2 -> SCHOOL1C_Online
    | 3 -> ``SCHOOL1C_Other (specify)``

let toSCHTRN1 (v:string) : SCHTRN1 =
    match int v with
    | -1 -> ``SCHTRN1_Valid skip``
    | 1 -> SCHTRN1_Car
    | 2 -> SCHTRN1_Van
    | 3 -> ``SCHTRN1_SUV|Crossover``
    | 4 -> ``SCHTRN1_Pickup truck``
    | 7 -> SCHTRN1_Motorcycle
    | 8 -> ``SCHTRN1_Public or commuter bus``
    | 9 -> ``SCHTRN1_School bus``
    | 10 -> ``SCHTRN1_Streetcar or trolley car``
    | 11 -> ``SCHTRN1_Subway or elevated rail``
    | 12 -> ``SCHTRN1_Commuter rail``
    | 15 -> ``SCHTRN1_Taxicab or limo service``
    | 16 -> ``SCHTRN1_Other ride-sharing service``
    | 17 -> ``SCHTRN1_Paratransit| Dial a ride``
    | 18 -> ``SCHTRN1_Bicycle (including bikeshare, ebike, etc)``
    | 19 -> ``SCHTRN1_E-scooter``
    | 20 -> SCHTRN1_Walked
    | 21 -> ``SCHTRN1_Other (specify)``

let toSCHTYP (v:string) : SCHTYP =
    match int v with
    | -1 -> ``SCHTYP_Valid skip``
    | -9 -> ``SCHTYP_Not ascertained``
    | 1 -> ``SCHTYP_Public or private school``
    | 2 -> ``SCHTYP_Home schooled``
    | 3 -> ``SCHTYP_Other (specify)``

let toSTUDE (v:string) : STUDE =
    match int v with
    | -1 -> ``STUDE_Valid skip``
    | -9 -> ``STUDE_Not ascertained``
    | 1 -> ``STUDE_K-12th grade including GED``
    | 2 -> ``STUDE_Vocation|Technical|Trade School``
    | 3 -> ``STUDE_Part-time college or university``
    | 4 -> ``STUDE_Full-time college or university``
    | 5 -> ``STUDE_Other (specify)``

let toUSAGE1 (v:string) : USAGE1 =
    match int v with
    | -1 -> ``USAGE1_Valid skip``
    | -9 -> ``USAGE1_Not ascertained``
    | 1 -> ``USAGE1_Yes, took fewer trips``
    | 2 -> ``USAGE1_No, did not take fewer trips``

let toUSAGE2_1 (v:string) : USAGE2_1 =
    match int v with
    | -1 -> ``USAGE2_1_Valid skip``
    | -9 -> ``USAGE2_1_Not ascertained``
    | 1 -> ``USAGE2_1_I had more home deliveries``
    | 2 -> ``USAGE2_1_Not Selected``

let toUSAGE2_10 (v:string) : USAGE2_10 =
    match int v with
    | -1 -> ``USAGE2_10_Valid skip``
    | -9 -> ``USAGE2_10_Not ascertained``
    | 1 -> ``USAGE2_10_Concerns related to COVID 19``
    | 2 -> ``USAGE2_10_Not Selected``

let toUSAGE2_2 (v:string) : USAGE2_2 =
    match int v with
    | -1 -> ``USAGE2_2_Valid skip``
    | -9 -> ``USAGE2_2_Not ascertained``
    | 1 -> ``USAGE2_2_Transportation did not feel safe``
    | 2 -> ``USAGE2_2_Not Selected``

let toUSAGE2_3 (v:string) : USAGE2_3 =
    match int v with
    | -1 -> ``USAGE2_3_Valid skip``
    | -9 -> ``USAGE2_3_Not ascertained``
    | 1 -> ``USAGE2_3_Transportation did not feel clean or healthy``
    | 2 -> ``USAGE2_3_Not Selected``

let toUSAGE2_4 (v:string) : USAGE2_4 =
    match int v with
    | -1 -> ``USAGE2_4_Valid skip``
    | -9 -> ``USAGE2_4_Not ascertained``
    | 1 -> ``USAGE2_4_Transportation was not reliable``
    | 2 -> ``USAGE2_4_Not Selected``

let toUSAGE2_5 (v:string) : USAGE2_5 =
    match int v with
    | -1 -> ``USAGE2_5_Valid skip``
    | -9 -> ``USAGE2_5_Not ascertained``
    | 1 -> ``USAGE2_5_Available transportation did not go where I need to go``
    | 2 -> ``USAGE2_5_Not Selected``

let toUSAGE2_6 (v:string) : USAGE2_6 =
    match int v with
    | -1 -> ``USAGE2_6_valid skip``
    | -9 -> ``USAGE2_6_Not ascertained``
    | 1 -> ``USAGE2_6_Unable to afford available forms of transportation``
    | 2 -> ``USAGE2_6_Not Selected``

let toUSAGE2_7 (v:string) : USAGE2_7 =
    match int v with
    | -1 -> ``USAGE2_7_valid skip``
    | -9 -> ``USAGE2_7_Not ascertained``
    | 1 -> ``USAGE2_7_Had health problems and unable to travel``
    | 2 -> ``USAGE2_7_Not Selected``

let toUSAGE2_8 (v:string) : USAGE2_8 =
    match int v with
    | -1 -> ``USAGE2_8_Valid skip``
    | -9 -> ``USAGE2_8_Not ascertained``
    | 1 -> ``USAGE2_8_Did not have time to travel``
    | 2 -> ``USAGE2_8_Not Selected``

let toUSAGE2_9 (v:string) : USAGE2_9 =
    match int v with
    | -1 -> ``USAGE2_9_Valid skip``
    | -9 -> ``USAGE2_9_Not ascertained``
    | 1 -> ``USAGE2_9_Another reason``
    | 2 -> ``USAGE2_9_Not Selected``

let toWHOPROXY (v:string) : WHOPROXY =
    match int v with
    | -1 -> ``WHOPROXY_Valid skip``
    | 1 -> WHOPROXY_Person1
    | 2 -> ``WHOPROXY_Person 2``
    | 3 -> ``WHOPROXY_Person 3``
    | 4 -> ``WHOPROXY_Person 4``
    | 5 -> ``WHOPROXY_Person 5``
    | 6 -> ``WHOPROXY_Person 6``
    | 97 -> ``WHOPROXY_Someone else``

let toWKFMHM22 (v:string) : WKFMHM22 =
    match int v with
    | -1 -> ``WKFMHM22_Valid skip``
    | 1 -> WKFMHM22_Never
    | 2 -> ``WKFMHM22_One or two days a week``
    | 3 -> ``WKFMHM22_Three or four days a week``
    | 4 -> ``WKFMHM22_Five or more days a week| Entire work week``

let toWORKER (v:string) : WORKER =
    match int v with
    | -1 -> ``WORKER_Valid skip``
    | 1 -> WORKER_Worker
    | 2 -> ``WORKER_Not worker``

let toWRKLOC (v:string) : WRKLOC =
    match int v with
    | -1 -> ``WRKLOC_Valid skip``
    | 1 -> ``WRKLOC_Only one work location outside of home``
    | 2 -> ``WRKLOC_Work location regularly varies (different offices|job sites)``
    | 3 -> ``WRKLOC_Only work at home (telework, self-employed)``
    | 4 -> ``WRKLOC_Drive|travel for work (driver, sales)``

let toWRKTRANS (v:string) : WRKTRANS =
    match int v with
    | -1 -> ``WRKTRANS_Valid skip``
    | 1 -> WRKTRANS_Car
    | 2 -> WRKTRANS_Van
    | 3 -> ``WRKTRANS_SUV|Crossover``
    | 4 -> ``WRKTRANS_Pickup truck``
    | 7 -> WRKTRANS_Motorcycle
    | 8 -> ``WRKTRANS_Public or commuter bus``
    | 9 -> ``WRKTRANS_School bus``
    | 10 -> ``WRKTRANS_Streetcar or trolley car``
    | 11 -> ``WRKTRANS_Subway or elevated rail``
    | 12 -> ``WRKTRANS_Commuter rail``
    | 13 -> WRKTRANS_Amtrak
    | 14 -> WRKTRANS_Airplane
    | 15 -> ``WRKTRANS_Taxicab or limo service``
    | 16 -> ``WRKTRANS_Other ride-sharing service``
    | 17 -> ``WRKTRANS_Paratransit| Dial a ride``
    | 18 -> ``WRKTRANS_Bicycle (including bikeshare, ebike, etc)``
    | 19 -> ``WRKTRANS_E-scooter``
    | 20 -> WRKTRANS_Walked
    | 21 -> ``WRKTRANS_Other (specify)``
    | 22 -> WRKTRANS_Ferryboat

let toW_CANE (v:string) : W_CANE =
    match int v with
    | -1 -> ``W_CANE_Valid skip``
    | -7 -> ``W_CANE_I prefer not to answer``
    | -8 -> ``W_CANE_Don't know``
    | -9 -> ``W_CANE_Not ascertained``
    | 1 -> W_CANE_Selected
    | 2 -> ``W_CANE_Not Selected``

let toDRVR_FLG (v:string) : DRVR_FLG =
    match int v with
    | -1 -> ``DRVR_FLG_Valid skip``
    | 1 -> ``DRVR_FLG_Driver on trip``
    | 2 -> ``DRVR_FLG_Not driver on trip``

let toHHMEMDRV (v:string) : HHMEMDRV =
    match int v with
    | -1 -> ``HHMEMDRV_Valid skip``
    | -9 -> ``HHMEMDRV_Not ascertained``
    | 1 -> ``HHMEMDRV_Household member drove``
    | 2 -> ``HHMEMDRV_Non-household member drove``

let toLOOP_TRIP (v:string) : LOOP_TRIP =
    match int v with
    | 1 -> ``LOOP_TRIP_Loop trip``
    | 2 -> ``LOOP_TRIP_Not a loop trip``

let toONTD_P1 (v:string) : ONTD_P1 =
    match int v with
    | 1 -> ONTD_P1_Selected
    | 2 -> ``ONTD_P1_Not Selected``

let toONTD_P10 (v:string) : ONTD_P10 =
    match int v with
    | -1 -> ``ONTD_P10_Valid skip``
    | 2 -> ``ONTD_P10_Not Selected``

let toONTD_P2 (v:string) : ONTD_P2 =
    match int v with
    | -1 -> ``ONTD_P2_Valid skip``
    | 1 -> ONTD_P2_Selected
    | 2 -> ``ONTD_P2_Not Selected``

let toPARK2 (v:string) : PARK2 =
    match int v with
    | -1 -> ``PARK2_Valid skip``
    | 1 -> ``PARK2_Paid to park``
    | 9996 -> ``PARK2_N|A Paid for by employer``
    | 9997 -> ``PARK2_N|A Paid for by school``
    | 9998 -> ``PARK2_Paid but I don't remember the cost``
    | 9999 -> ``PARK2_I did not pay for parking at this location``

let toPARK2_PAYTYPE (v:string) : PARK2_PAYTYPE =
    match int v with
    | -1 -> ``PARK2_PAYTYPE_Valid skip``
    | 1 -> ``PARK2_PAYTYPE_One Time``
    | 2 -> ``PARK2_PAYTYPE_Per Week``
    | 3 -> ``PARK2_PAYTYPE_Per Month``
    | 5 -> ``PARK2_PAYTYPE_Per Semester``
    | 6 -> ``PARK2_PAYTYPE_Per Year``

let toPSGR_FLG (v:string) : PSGR_FLG =
    match int v with
    | -1 -> ``PSGR_FLG_Valid skip``
    | 1 -> ``PSGR_FLG_Passenger on trip``
    | 2 -> ``PSGR_FLG_Not passenger on trip``

let toPUBTRANS (v:string) : PUBTRANS =
    match int v with
    | 1 -> ``PUBTRANS_Used public transit``
    | 2 -> ``PUBTRANS_Did not use public transit``

let toTDWKND (v:string) : TDWKND =
    match int v with
    | 1 -> TDWKND_Weekend
    | 2 -> TDWKND_Weekday

let toTRIPPURP (v:string) : TRIPPURP =
    match int v with
    | -9 -> ``TRIPPURP_Not ascertained``
    | 1 -> ``TRIPPURP_Home-based work (HBW)``
    | 2 -> ``TRIPPURP_Home-based shopping (HBSHP)``
    | 3 -> ``TRIPPURP_Home-based social|recreational (HBSOC)``
    | 4 -> ``TRIPPURP_Home-based other (HBO)``
    | 5 -> ``TRIPPURP_Not a home-based trip (NHB)``

let toTRPHHVEH (v:string) : TRPHHVEH =
    match int v with
    | -1 -> ``TRPHHVEH_Valid skip``
    | 1 -> ``TRPHHVEH_Yes, used a household vehicle``
    | 2 -> ``TRPHHVEH_No, did not use a household vehicle``

let toTRPTRANS (v:string) : TRPTRANS =
    match int v with
    | 1 -> TRPTRANS_Car
    | 2 -> TRPTRANS_Van
    | 3 -> ``TRPTRANS_SUV|Crossover``
    | 4 -> ``TRPTRANS_Pickup truck``
    | 6 -> ``TRPTRANS_Recreational Vehicle``
    | 7 -> TRPTRANS_Motorcycle
    | 8 -> ``TRPTRANS_Public or commuter bus``
    | 9 -> ``TRPTRANS_School bus``
    | 10 -> ``TRPTRANS_Street car or trolley car``
    | 11 -> ``TRPTRANS_Subway or elevated rail``
    | 12 -> ``TRPTRANS_Commuter rail``
    | 13 -> TRPTRANS_Amtrak
    | 14 -> TRPTRANS_Airplane
    | 15 -> ``TRPTRANS_Taxicab or limo service``
    | 16 -> ``TRPTRANS_Other ride-sharing service``
    | 17 -> ``TRPTRANS_Paratransit| Dial a ride``
    | 18 -> ``TRPTRANS_Bicycle (including bikeshare, ebike, etc)``
    | 19 -> ``TRPTRANS_E-scooter``
    | 20 -> TRPTRANS_Walked
    | 21 -> ``TRPTRANS_Other (specify)``

let toWALK (v:string) : WALK =
    match int v with
    | -1 -> ``WALK_Valid skip``
    | -9 -> ``WALK_Not ascertained``
    | 1 -> ``WALK_0 minutes| parked in the same building``
    | 2 -> ``WALK_1 to less than 5 minutes``
    | 3 -> ``WALK_5 to less than 10 minutes``
    | 4 -> ``WALK_10 to less than 15 minutes``
    | 5 -> ``WALK_15 to less than 20 minutes``
    | 6 -> ``WALK_20 minutes or more``
    | 7 -> ``WALK_N|A - someone else took vehicle``
    | 8 -> ``WALK_N|A - Didn't park``

let toWHODROVE (v:string) : WHODROVE =
    match int v with
    | -1 -> ``WHODROVE_Valid skip``
    | -9 -> ``WHODROVE_Not ascertained``
    | 1 -> ``WHODROVE_Person 1``
    | 2 -> ``WHODROVE_Person 2``
    | 3 -> ``WHODROVE_Person 3``
    | 4 -> ``WHODROVE_Person 4``
    | 5 -> ``WHODROVE_Person 5``
    | 7 -> ``WHODROVE_Person 7``
    | 97 -> ``WHODROVE_Non household member drove``

let toWHYFROM (v:string) : WHYFROM =
    match int v with
    | -9 -> ``WHYFROM_Not ascertained``
    | 1 -> ``WHYFROM_Regular activities at home``
    | 2 -> ``WHYFROM_Work from home (paid)``
    | 3 -> ``WHYFROM_Work at a non-home location``
    | 4 -> ``WHYFROM_Work activity to drop-off|pickup someone|something``
    | 5 -> ``WHYFROM_Other work-related activities``
    | 6 -> ``WHYFROM_Attend school as a student``
    | 7 -> ``WHYFROM_Attend childcare or adult care``
    | 8 -> ``WHYFROM_Volunteer activities (not paid)``
    | 9 -> ``WHYFROM_Change type of transportation``
    | 10 -> ``WHYFROM_Drop off|pick up someone (personal)``
    | 11 -> ``WHYFROM_Health care visit``
    | 12 -> ``WHYFROM_Buy meals``
    | 13 -> ``WHYFROM_Shop|buy|pick-up or return goods``
    | 14 -> ``WHYFROM_Other family|personal errands``
    | 15 -> ``WHYFROM_Recreational activities``
    | 16 -> WHYFROM_Exercise
    | 17 -> ``WHYFROM_Visit friends or relatives``
    | 18 -> ``WHYFROM_Rest or relaxation|vacation``
    | 19 -> ``WHYFROM_Religious or other community activities``
    | 97 -> ``WHYFROM_Something else (specify)``

let toWHYTO (v:string) : WHYTO =
    match int v with
    | 1 -> ``WHYTO_Regular activities at home``
    | 2 -> ``WHYTO_Work from home (paid)``
    | 3 -> ``WHYTO_Work at a non-home location``
    | 4 -> ``WHYTO_Work activity to drop-off|pickup someone|something``
    | 5 -> ``WHYTO_Other work-related activities``
    | 6 -> ``WHYTO_Attend school as a student``
    | 7 -> ``WHYTO_Attend childcare or adult care``
    | 8 -> ``WHYTO_Volunteer activities (not paid)``
    | 9 -> ``WHYTO_Change type of transportation``
    | 10 -> ``WHYTO_Drop off|pick up someone (personal)``
    | 11 -> ``WHYTO_Health care visit``
    | 12 -> ``WHYTO_Buy meals``
    | 13 -> ``WHYTO_Shop|buy|pick-up or return goods``
    | 14 -> ``WHYTO_Other family|personal errands``
    | 15 -> ``WHYTO_Recreational activities``
    | 16 -> WHYTO_Exercise
    | 17 -> ``WHYTO_Visit friends or relatives``
    | 18 -> ``WHYTO_Rest or relaxation|vacation``
    | 19 -> ``WHYTO_Religious or other community activities``
    | 97 -> ``WHYTO_Something else (specify)``

let toWHYTRP1S (v:string) : WHYTRP1S =
    match int v with
    | 1 -> WHYTRP1S_Home
    | 10 -> WHYTRP1S_Work
    | 20 -> ``WHYTRP1S_School|Daycare|Religious``
    | 30 -> ``WHYTRP1S_Medical|Dental services``
    | 40 -> ``WHYTRP1S_Shopping|Errands``
    | 50 -> ``WHYTRP1S_Social|Recreational``
    | 70 -> ``WHYTRP1S_Transport someone``
    | 80 -> WHYTRP1S_Meals
    | 97 -> ``WHYTRP1S_Something else``

let toWHYTRP90 (v:string) : WHYTRP90 =
    match int v with
    | 1 -> ``WHYTRP90_To|From Work``
    | 2 -> ``WHYTRP90_Work-Related Business``
    | 3 -> WHYTRP90_Shopping
    | 4 -> ``WHYTRP90_Other Family|Personal Business``
    | 5 -> ``WHYTRP90_School|Church``
    | 6 -> ``WHYTRP90_Medical|Dental``
    | 8 -> ``WHYTRP90_Visit Friends|Relatives``
    | 10 -> ``WHYTRP90_Other Social|Recreational``
    | 11 -> WHYTRP90_Other
    | 99 -> ``WHYTRP90_Refused | Don't Know``

let toAIRSIZE (v:string) : AIRSIZE =
    match int v with
    | -1 -> ``AIRSIZE_Valid Skip``
    | -9 -> ``AIRSIZE_Not Ascertained``
    | 1 -> AIRSIZE_Nonhub
    | 2 -> AIRSIZE_Small
    | 3 -> AIRSIZE_Medium
    | 4 -> AIRSIZE_Large

let toEXITCDIV (v:string) : EXITCDIV =
    match int v with
    | -1 -> ``EXITCDIV_Valid Skip``
    | -9 -> ``EXITCDIV_Not Ascertained``
    | 1 -> ``EXITCDIV_New England``
    | 2 -> ``EXITCDIV_Middle Atlantic``
    | 3 -> ``EXITCDIV_East North Central``
    | 4 -> ``EXITCDIV_West North Central``
    | 5 -> ``EXITCDIV_South Atlantic``
    | 6 -> ``EXITCDIV_East South Central``
    | 7 -> ``EXITCDIV_West South Central``
    | 8 -> EXITCDIV_Mountain
    | 9 -> EXITCDIV_Pacific

let toFARCREG (v:string) : FARCREG =
    match int v with
    | -1 -> ``FARCREG_Valid Skip``
    | -9 -> ``FARCREG_Not Ascertained``
    | 1 -> FARCREG_Northeast
    | 2 -> FARCREG_Midwest
    | 3 -> FARCREG_South
    | 4 -> FARCREG_West

let toFARREAS (v:string) : FARREAS =
    match int v with
    | -1 -> ``FARREAS_Valid skip``
    | -9 -> ``FARREAS_Not ascertained``
    | 1 -> ``FARREAS_Business trip``
    | 2 -> ``FARREAS_Personal vacation``
    | 3 -> ``FARREAS_Visit family or friends``
    | 4 -> ``FARREAS_Other, specify``

let toGCD_FLAG (v:string) : GCD_FLAG =
    match int v with
    | -1 -> ``GCD_FLAG_Valid Skip``
    | -9 -> ``GCD_FLAG_Not Ascertained``
    | 1 -> ``GCD_FLAG_GCD 50 miles or more``
    | 2 -> ``GCD_FLAG_GCD less than 50 miles``

let toINT_FLAG (v:string) : INT_FLAG =
    match int v with
    | -1 -> ``INT_FLAG_valid skip``
    | -9 -> ``INT_FLAG_not ascertained``
    | 1 -> ``INT_FLAG_Inside the US``
    | 2 -> ``INT_FLAG_Outside the US``

let toLDT_FLAG (v:string) : LDT_FLAG =
    match int v with
    | -9 -> ``LDT_FLAG_Not Ascertained``
    | 1 -> ``LDT_FLAG_Long distance info derived from travel day``
    | 2 -> ``LDT_FLAG_Long distance info asked of respondents``
    | 3 -> ``LDT_FLAG_More than 5 years since last long distance trip``
    | 4 -> ``LDT_FLAG_Never taken a trip longer than 50 miles``

let toMAINMODE (v:string) : MAINMODE =
    match int v with
    | -1 -> ``MAINMODE_Valid skip``
    | -9 -> ``MAINMODE_Not ascertained``
    | 1 -> MAINMODE_Car
    | 2 -> MAINMODE_Van
    | 3 -> ``MAINMODE_SUV|Crossover``
    | 4 -> ``MAINMODE_Pickup truck``
    | 6 -> ``MAINMODE_Recreational Vehicle``
    | 7 -> MAINMODE_Motorcycle
    | 8 -> ``MAINMODE_Public or commuter bus``
    | 9 -> ``MAINMODE_School bus``
    | 11 -> ``MAINMODE_Subway or elevated rail``
    | 12 -> ``MAINMODE_Commuter rail``
    | 13 -> MAINMODE_Amtrak
    | 14 -> MAINMODE_Airplane
    | 15 -> ``MAINMODE_Taxicab or limo service``
    | 16 -> ``MAINMODE_Other ride-sharing service``
    | 17 -> ``MAINMODE_Paratransit| Dial a ride``
    | 18 -> ``MAINMODE_Bicycle (including bikeshare, ebike, etc)``
    | 20 -> MAINMODE_Walked
    | 21 -> ``MAINMODE_Other (specify)``
    | 22 -> MAINMODE_Ferryboat
    | 23 -> ``MAINMODE_Charter|tour buses``
    | 24 -> ``MAINMODE_Inter-city bus service``

let toONTP_P (v:string) : ONTP_P =
    match int v with
    | -1 -> ``ONTP_P_Valid skip``
    | -9 -> ``ONTP_P_Not ascertained``
    | 1 -> ``ONTP_P_On trip``
    | 2 -> ``ONTP_P_Not on trip``

let toWEEKEND (v:string) : WEEKEND =
    match int v with
    | -1 -> ``WEEKEND_Valid Skip``
    | -9 -> ``WEEKEND_Not Ascertained``
    | 1 -> ``WEEKEND_Short weekend (2 or 3 days and includes a FRI and|or SAT) and return date not FRI``
    | 2 -> ``WEEKEND_Long weekend (4 to 6 days and includes a FRI and|or SAT) and return date not FRI``
    | 3 -> ``WEEKEND_Not weekend trip (all other trips)``

let toBaseResponse (v:string) : Response = 
    try 
        match Int32.TryParse v with 
        | true, v -> 
            match v with
            | -1 -> R_NotAscertained
            | -9 -> R_Skipped
            | x -> Value(float x)
        | _ ->
            match Double.TryParse v with 
            | true, v -> Value v
            | _ -> failwith $"Unable to convert value to float: {v}"
    with ex -> 
        failwith $"Value:{v}; Error: {ex.Message}" 

let toYesNo (v:string) : YesNo = 
    match int v with
    | -1 -> YN_NotAscertained
    | -9 -> YN_Skipped
    | 1 -> Yes
    | 2 -> No


let toFloat (v:string) : float = 
    match Double.TryParse v with
    | true, f -> f
    | _ -> 0.0


let toDateTime (v:string) : DateTime = 
    match DateTime.TryParseExact(v, "yyyyMM", null, System.Globalization.DateTimeStyles.None) with
    | true, d -> d
    | _ -> DateTime.MinValue


let toVEHTYPE (v:string) : VEHTYPE =
    match int v with
    | -1 -> ``VEHTYPE_Valid skip``
    | 1 -> ``VEHTYPE_Automobile|Car|Stationwagon``
    | 2 -> ``VEHTYPE_Van (Minivan|Cargo|Passenger)``
    | 3 -> ``VEHTYPE_SUV (Santa Fe, Tahoe, Jeep, etc)``
    | 4 -> ``VEHTYPE_Pickup Truck``
    | 5 -> ``VEHTYPE_Other Truck``
    | 6 -> ``VEHTYPE_Recreational vehicle (RV)|Motorhome``
    | 7 -> VEHTYPE_MotorcycleMoped
    | 97 -> ``VEHTYPE_Something else``

let to_Household (vals:string[]) =
 {
        HOUSEID = string vals.[0]
        WTHHFIN = toFloat vals.[1]
        WTHHFIN5D = toFloat vals.[2]
        WTHHFIN2D = toFloat vals.[3]
        NUMADLT = toFloat vals.[4]
        HOMEOWN = toHOMEOWN vals.[5]
        HOMETYPE = toHOMETYPE vals.[6]
        RAIL = toYesNo vals.[7]
        CENSUS_D = toCENSUS_D vals.[8]
        CENSUS_R = toCENSUS_R vals.[9]
        HH_HISP = toHH_HISP vals.[10]
        DRVRCNT = toFloat vals.[11]
        CNTTDHH = toFloat vals.[12]
        CDIVMSAR = toCDIVMSAR vals.[13]
        FLAG100 = toFLAG100 vals.[14]
        HHFAMINC = toHHFAMINC vals.[15]
        HHFAMINC_IMP = toHHFAMINC_IMP vals.[16]
        HH_RACE = toHH_RACE vals.[17]
        HHSIZE = toFloat vals.[18]
        HHVEHCNT = toFloat vals.[19]
        HHRELATD = toHHRELATD vals.[20]
        LIF_CYC = toLIF_CYC vals.[21]
        MSACAT = toMSACAT vals.[22]
        MSASIZE = toMSASIZE vals.[23]
        TRAVDAY = toTRAVDAY vals.[24]
        URBAN = toURBAN vals.[25]
        URBANSIZE = toURBANSIZE vals.[26]
        URBRUR = toURBRUR vals.[27]
        PPT517 = toFloat vals.[28]
        YOUNGCHILD = toFloat vals.[29]
        RESP_CNT = toFloat vals.[30]
        URBRUR_2010 = toURBRUR vals.[31]
        TDAYDATE = toDateTime vals.[32]
        WRKCOUNT = toFloat vals.[33]
        STRATUMID = string vals.[34]
}

let to_Vehicle (vals:string[]) =
 {
        HOUSEID = string vals.[0]
        VEHID = string vals.[1]
        VEHYEAR = toFloat vals.[2]
        MAKE = toMAKE vals.[3]
        HHVEHCNT = toFloat vals.[4]
        VEHTYPE = toVEHTYPE vals.[5]
        VEHFUEL = toVEHFUEL vals.[6]
        VEHCOMMERCIAL = toYesNo vals.[7]
        VEHCOM_RS = toYesNo vals.[8]
        VEHCOM_DEL = toYesNo vals.[9]
        VEHCOM_OTH = toYesNo vals.[10]
        COMMERCIALFREQ = toBaseResponse vals.[11]
        HHVEHUSETIME_RS = toBaseResponse vals.[12]
        HHVEHUSETIME_DEL = toBaseResponse vals.[13]
        HHVEHUSETIME_OTH = toBaseResponse vals.[14]
        VEHOWNED = toYesNo vals.[15]
        WHOMAIN = toWHOMAIN vals.[16]
        VEHCASEID = string vals.[17]
        ANNMILES = toBaseResponse vals.[18]
        HYBRID = toYesNo vals.[19]
        VEHAGE = toFloat vals.[20]
        VEHOWNMO = toBaseResponse vals.[21]
        NUMADLT = toFloat vals.[22]
        HOMEOWN = toHOMEOWN vals.[23]
        RAIL = toYesNo vals.[24]
        CENSUS_D = toCENSUS_D vals.[25]
        CENSUS_R = toCENSUS_R vals.[26]
        HH_HISP = toHH_HISP vals.[27]
        DRVRCNT = toFloat vals.[28]
        CDIVMSAR = toCDIVMSAR vals.[29]
        HHFAMINC = toHHFAMINC vals.[30]
        HH_RACE = toHH_RACE vals.[31]
        HHSIZE = toFloat vals.[32]
        LIF_CYC = toLIF_CYC vals.[33]
        MSACAT = toMSACAT vals.[34]
        MSASIZE = toMSASIZE vals.[35]
        TRAVDAY = toTRAVDAY vals.[36]
        URBAN = toURBAN vals.[37]
        URBANSIZE = toURBANSIZE vals.[38]
        URBRUR = toURBRUR vals.[39]
        TDAYDATE = toDateTime vals.[40]
        WRKCOUNT = toFloat vals.[41]
        STRATUMID = string vals.[42]
        WTHHFIN = toFloat vals.[43]
        WTHHFIN5D = toFloat vals.[44]
        WTHHFIN2D = toFloat vals.[45]
        HHFAMINC_IMP = toHHFAMINC_IMP vals.[46]
}

let to_Person (vals:string[]) =
 {
        HOUSEID = string vals.[0]
        PERSONID = string vals.[1]
        WTPERFIN = toFloat vals.[2]
        WTPERFIN5D = toFloat vals.[3]
        WTPERFIN2D = toFloat vals.[4]
        R_AGE = toFloat vals.[5]
        R_SEX = toR_SEX vals.[6]
        R_RELAT = toR_RELAT vals.[7]
        WORKER = toWORKER vals.[8]
        DRIVER = toYesNo vals.[9]
        R_RACE = toR_RACE vals.[10]
        GCDWORK = toBaseResponse vals.[11]
        OUTOFTWN = toYesNo vals.[12]
        USEPUBTR = toYesNo vals.[13]
        R_RACE_IMP = toHH_RACE vals.[14]
        R_HISP = toR_HISP vals.[15]
        PROXY = toPROXY vals.[16]
        WHOPROXY = toWHOPROXY vals.[17]
        EDUC = toEDUC vals.[18]
        LAST30_TAXI = toYesNo vals.[19]
        LAST30_RDSHR = toYesNo vals.[20]
        LAST30_ESCT = toYesNo vals.[21]
        LAST30_PT = toYesNo vals.[22]
        LAST30_MTRC = toYesNo vals.[23]
        LAST30_WALK = toYesNo vals.[24]
        LAST30_BIKE = toYesNo vals.[25]
        LAST30_BKSHR = toLAST30_BKSHR vals.[26]
        TAXISERVICE = toBaseResponse vals.[27]
        RIDESHARE22 = toBaseResponse vals.[28]
        ESCOOTERUSED = toBaseResponse vals.[29]
        PTUSED = toBaseResponse vals.[30]
        TRNPASS = toYesNo vals.[31]
        MCTRANSIT = toBaseResponse vals.[32]
        WALKTRANSIT = toBaseResponse vals.[33]
        BIKETRANSIT = toBaseResponse vals.[34]
        BIKESHARE22 = toBaseResponse vals.[35]
        USAGE1 = toUSAGE1 vals.[36]
        USAGE2_1 = toUSAGE2_1 vals.[37]
        USAGE2_2 = toUSAGE2_2 vals.[38]
        USAGE2_3 = toUSAGE2_3 vals.[39]
        USAGE2_4 = toUSAGE2_4 vals.[40]
        USAGE2_5 = toUSAGE2_5 vals.[41]
        USAGE2_6 = toUSAGE2_6 vals.[42]
        USAGE2_7 = toUSAGE2_7 vals.[43]
        USAGE2_8 = toUSAGE2_8 vals.[44]
        USAGE2_9 = toUSAGE2_9 vals.[45]
        USAGE2_10 = toUSAGE2_10 vals.[46]
        QACSLAN1 = toYesNo vals.[47]
        QACSLAN3 = toQACSLAN3 vals.[48]
        PAYPROF = toYesNo vals.[49]
        PRMACT = toPRMACT vals.[50]
        EMPLOYMENT2 = toBaseResponse vals.[51]
        DRIVINGOCCUPATION = toYesNo vals.[52]
        DRIVINGVEHICLE = toDRIVINGVEHICLE vals.[53]
        WRKLOC = toWRKLOC vals.[54]
        WKFMHM22 = toWKFMHM22 vals.[55]
        WRKTRANS = toWRKTRANS vals.[56]
        EMPPASS = toYesNo vals.[57]
        SCHOOL1 = toYesNo vals.[58]
        STUDE = toSTUDE vals.[59]
        SCHTYP = toSCHTYP vals.[60]
        SCHOOL1C = toSCHOOL1C vals.[61]
        SCHTRN1 = toSCHTRN1 vals.[62]
        DELIVER = toBaseResponse vals.[63]
        DELIV_GOOD = toBaseResponse vals.[64]
        DELIV_FOOD = toBaseResponse vals.[65]
        DELIV_GROC = toBaseResponse vals.[66]
        DELIV_PERS = toBaseResponse vals.[67]
        RET_HOME = toBaseResponse vals.[68]
        RET_PUF = toBaseResponse vals.[69]
        RET_AMZ = toBaseResponse vals.[70]
        RET_STORE = toBaseResponse vals.[71]
        MEDCOND = toMEDCOND vals.[72]
        MEDCOND6 = toMEDCOND6 vals.[73]
        W_CANE = toW_CANE vals.[74]
        W_WKCR = toW_CANE vals.[75]
        W_VISIMP = toW_CANE vals.[76]
        W_SCCH = toW_CANE vals.[77]
        W_CHAIR = toW_CANE vals.[78]
        W_NONE = toW_CANE vals.[79]
        CONDTRAV = toCONDNIGH vals.[80]
        CONDRIDE = toCONDNIGH vals.[81]
        CONDNIGH = toCONDNIGH vals.[82]
        CONDRIVE = toCONDNIGH vals.[83]
        CONDPUB = toCONDNIGH vals.[84]
        CONDSPEC = toCONDNIGH vals.[85]
        CONDSHARE = toCONDNIGH vals.[86]
        CONDNONE = toCONDNIGH vals.[87]
        CONDRF = toCONDNIGH vals.[88]
        FRSTHM = toYesNo vals.[89]
        PARK = toYesNo vals.[90]
        PARKHOME = toYesNo vals.[91]
        PARKHOMEAMT = toPARKHOMEAMT vals.[92]
        PARKHOMEAMT_PAMOUNT = toBaseResponse vals.[93]
        PARKHOMEAMT_PAYTYPE = toPARKHOMEAMT_PAYTYPE vals.[94]
        SAMEPLC = toSAMEPLC vals.[95]
        COV1_WK = toCOV1_SCH vals.[96]
        COV1_SCH = toCOV1_SCH vals.[97]
        COV1_PT = toCOV1_OHD vals.[98]
        COV1_OHD = toCOV1_OHD vals.[99]
        COV2_WK = toCOV2_OHD vals.[100]
        COV2_SCH = toCOV2_SCH vals.[101]
        COV2_PT = toCOV2_OHD vals.[102]
        COV2_OHD = toCOV2_OHD vals.[103]
        CNTTDTR = toFloat vals.[104]
        R_SEX_IMP = toR_SEX_IMP vals.[105]
        NUMADLT = toFloat vals.[106]
        HOMEOWN = toHOMEOWN vals.[107]
        RAIL = toYesNo vals.[108]
        CENSUS_D = toCENSUS_D vals.[109]
        CENSUS_R = toCENSUS_R vals.[110]
        HH_HISP = toHH_HISP vals.[111]
        DRVRCNT = toFloat vals.[112]
        CDIVMSAR = toCDIVMSAR vals.[113]
        HHFAMINC = toHHFAMINC vals.[114]
        HH_RACE = toHH_RACE vals.[115]
        HHSIZE = toFloat vals.[116]
        HHVEHCNT = toFloat vals.[117]
        LIF_CYC = toLIF_CYC vals.[118]
        MSACAT = toMSACAT vals.[119]
        MSASIZE = toMSASIZE vals.[120]
        TRAVDAY = toTRAVDAY vals.[121]
        URBAN = toURBAN vals.[122]
        URBANSIZE = toURBANSIZE vals.[123]
        URBRUR = toURBRUR vals.[124]
        TDAYDATE = toDateTime vals.[125]
        WRKCOUNT = toFloat vals.[126]
        STRATUMID = string vals.[127]
        HHFAMINC_IMP = toHHFAMINC_IMP vals.[128]
}

let to_Trip (vals:string[]) =
 {
        HOUSEID = string vals.[0]
        PERSONID = string vals.[1]
        TRIPID = string vals.[2]
        SEQ_TRIPID = string vals.[3]
        VEHCASEID = string vals.[4]
        FRSTHM = toYesNo vals.[5]
        PARK = toYesNo vals.[6]
        HHMEMDRV = toHHMEMDRV vals.[7]
        TDWKND = toTDWKND vals.[8]
        TRAVDAY = toTRAVDAY vals.[9]
        LOOP_TRIP = toLOOP_TRIP vals.[10]
        DWELTIME = toBaseResponse vals.[11]
        PUBTRANS = toPUBTRANS vals.[12]
        TRIPPURP = toTRIPPURP vals.[13]
        WHYFROM = toWHYFROM vals.[14]
        WHYTRP1S = toWHYTRP1S vals.[15]
        TRVLCMIN = toBaseResponse vals.[16]
        STRTTIME = toBaseResponse vals.[17]
        ENDTIME = toBaseResponse vals.[18]
        TRPHHVEH = toTRPHHVEH vals.[19]
        VEHID = string vals.[20]
        TRPTRANS = toTRPTRANS vals.[21]
        NUMONTRP = toFloat vals.[22]
        ONTD_P1 = toONTD_P1 vals.[23]
        ONTD_P2 = toONTD_P2 vals.[24]
        ONTD_P3 = toONTD_P2 vals.[25]
        ONTD_P4 = toONTD_P2 vals.[26]
        ONTD_P5 = toONTD_P2 vals.[27]
        ONTD_P6 = toONTD_P2 vals.[28]
        ONTD_P7 = toONTD_P2 vals.[29]
        ONTD_P8 = toONTD_P2 vals.[30]
        ONTD_P9 = toONTD_P2 vals.[31]
        ONTD_P10 = toONTD_P10 vals.[32]
        NONHHCNT = toFloat vals.[33]
        HHACCCNT = toFloat vals.[34]
        WHODROVE = toWHODROVE vals.[35]
        DRVR_FLG = toDRVR_FLG vals.[36]
        PSGR_FLG = toPSGR_FLG vals.[37]
        WHODROVE_IMP = toWHODROVE vals.[38]
        PARK2_PAMOUNT = toBaseResponse vals.[39]
        PARK2_PAYTYPE = toPARK2_PAYTYPE vals.[40]
        PARK2 = toPARK2 vals.[41]
        WHYTO = toWHYTO vals.[42]
        WALK = toWALK vals.[43]
        TRPMILES = toBaseResponse vals.[44]
        WTTRDFIN = toFloat vals.[45]
        WTTRDFIN5D = toFloat vals.[46]
        WTTRDFIN2D = toFloat vals.[47]
        TDCASEID = string vals.[48]
        VMT_MILE = toBaseResponse vals.[49]
        GASPRICE = toFloat vals.[50]
        WHYTRP90 = toWHYTRP90 vals.[51]
        NUMADLT = toFloat vals.[52]
        HOMEOWN = toHOMEOWN vals.[53]
        RAIL = toYesNo vals.[54]
        CENSUS_D = toCENSUS_D vals.[55]
        CENSUS_R = toCENSUS_R vals.[56]
        HH_HISP = toHH_HISP vals.[57]
        DRVRCNT = toFloat vals.[58]
        CDIVMSAR = toCDIVMSAR vals.[59]
        HHFAMINC = toHHFAMINC vals.[60]
        HH_RACE = toHH_RACE vals.[61]
        HHSIZE = toFloat vals.[62]
        HHVEHCNT = toFloat vals.[63]
        LIF_CYC = toLIF_CYC vals.[64]
        MSACAT = toMSACAT vals.[65]
        MSASIZE = toMSASIZE vals.[66]
        URBAN = toURBAN vals.[67]
        URBANSIZE = toURBANSIZE vals.[68]
        URBRUR = toURBRUR vals.[69]
        TDAYDATE = toDateTime vals.[70]
        WRKCOUNT = toFloat vals.[71]
        STRATUMID = string vals.[72]
        R_AGE = toFloat vals.[73]
        R_SEX = toR_SEX vals.[74]
        WORKER = toWORKER vals.[75]
        DRIVER = toYesNo vals.[76]
        R_RACE = toR_RACE vals.[77]
        R_HISP = toR_HISP vals.[78]
        PROXY = toPROXY vals.[79]
        EDUC = toEDUC vals.[80]
        PRMACT = toPRMACT vals.[81]
        R_SEX_IMP = toR_SEX_IMP vals.[82]
        VEHTYPE = toVEHTYPE vals.[83]
        HHFAMINC_IMP = toHHFAMINC_IMP vals.[84]
}

let to_LongTrip (vals:string[]) =
 {
        HOUSEID = string vals.[0]
        PERSONID = string vals.[1]
        LONGDIST = toFloat vals.[2]
        MAINMODE = toMAINMODE vals.[3]
        INT_FLAG = toINT_FLAG vals.[4]
        LD_NUMONTRP = toBaseResponse vals.[5]
        ONTP_P1 = toONTP_P vals.[6]
        ONTP_P2 = toONTP_P vals.[7]
        ONTP_P3 = toONTP_P vals.[8]
        ONTP_P4 = toONTP_P vals.[9]
        ONTP_P5 = toONTP_P vals.[10]
        ONTP_P6 = toONTP_P vals.[11]
        ONTP_P7 = toONTP_P vals.[12]
        ONTP_P8 = toONTP_P vals.[13]
        ONTP_P9 = toONTP_P vals.[14]
        ONTP_P10 = toONTP_P vals.[15]
        FARREAS = toFARREAS vals.[16]
        LD_AMT = toFloat vals.[17]
        LD_ICB = toFloat vals.[18]
        LDT_FLAG = toLDT_FLAG vals.[19]
        BEGTRIP = toBaseResponse vals.[20]
        ENDTRIP = toBaseResponse vals.[21]
        NTSAWAY = toBaseResponse vals.[22]
        WEEKEND = toWEEKEND vals.[23]
        MRT_DATE = toBaseResponse vals.[24]
        FARCDIV = toEXITCDIV vals.[25]
        FARCREG = toFARCREG vals.[26]
        GCDTOT = toBaseResponse vals.[27]
        AIRSIZE = toAIRSIZE vals.[28]
        EXITCDIV = toEXITCDIV vals.[29]
        GCD_FLAG = toGCD_FLAG vals.[30]
        NUMADLT = toFloat vals.[31]
        HOMEOWN = toHOMEOWN vals.[32]
        RAIL = toYesNo vals.[33]
        CENSUS_D = toCENSUS_D vals.[34]
        CENSUS_R = toCENSUS_R vals.[35]
        HH_HISP = toHH_HISP vals.[36]
        DRVRCNT = toFloat vals.[37]
        CDIVMSAR = toCDIVMSAR vals.[38]
        HHFAMINC = toHHFAMINC vals.[39]
        HHFAMINC_IMP = toHHFAMINC_IMP vals.[40]
        HH_RACE = toHH_RACE vals.[41]
        HHSIZE = toFloat vals.[42]
        HHVEHCNT = toFloat vals.[43]
        LIF_CYC = toLIF_CYC vals.[44]
        MSACAT = toMSACAT vals.[45]
        MSASIZE = toMSASIZE vals.[46]
        TRAVDAY = toTRAVDAY vals.[47]
        URBAN = toURBAN vals.[48]
        URBANSIZE = toURBANSIZE vals.[49]
        URBRUR = toURBRUR vals.[50]
        TDAYDATE = toDateTime vals.[51]
        WRKCOUNT = toFloat vals.[52]
        STRATUMID = string vals.[53]
        WTPERFIN = toFloat vals.[54]
        WTPERFIN5D = toFloat vals.[55]
        WTPERFIN2D = toFloat vals.[56]
        R_AGE = toFloat vals.[57]
        R_SEX = toR_SEX vals.[58]
        WORKER = toWORKER vals.[59]
        DRIVER = toYesNo vals.[60]
        R_RACE = toR_RACE vals.[61]
        R_HISP = toR_HISP vals.[62]
        PROXY = toPROXY vals.[63]
        EDUC = toEDUC vals.[64]
        R_SEX_IMP = toR_SEX_IMP vals.[65]
}